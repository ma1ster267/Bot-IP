import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from flask import Flask, request
from flask_sqlalchemy import SQLAlchemy
import requests
import base64
import json  # –ù–µ–æ–±—Ö—ñ–¥–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
from datetime import datetime

TOKEN = '7805329225:AAFu4s5jMAlalFNCCM-0FoSqm7L2Q_7eGQY'
WEBHOOK_URL = "https://bot-ip-odhy.onrender.com"
bot = telebot.TeleBot(TOKEN)

# Flask and SQLAlchemy setup
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///homework.db'  # SQLite database
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# Admins configuration
ADMIN_IDS = {5223717297, 1071290377, 1234567890}  # Add new IDs here
SUPPORT_ID = 5223717297

# GitHub configuration
GITHUB_TOKEN = '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'
OWNER = 'ma1ster267'
REPO = 'homework-repo'
API_URL = f'https://api.github.com/repos/{OWNER}/{REPO}/contents/homework.json'

# Database model for homework
class Homework(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    subject = db.Column(db.String(100), unique=True, nullable=False)
    task = db.Column(db.String(1000), nullable=True)

    def __repr__(self):
        return f"Homework('{self.subject}', '{self.task}')"

# Create tables
db.create_all()

# Function to load homework from the database
def load_homework():
    homework_list = Homework.query.all()
    homework_dict = {homework.subject: homework.task for homework in homework_list}
    return homework_dict

# Function to save homework to the database
def save_homework(homework_dict):
    for subject, task in homework_dict.items():
        homework = Homework.query.filter_by(subject=subject).first()
        if homework:
            homework.task = task
        else:
            new_homework = Homework(subject=subject, task=task)
            db.session.add(new_homework)
    db.session.commit()

# Function to save homework to GitHub
def save_homework_to_github(homework_dict):
    file_path = 'homework.json'
    content = json.dumps(homework_dict, ensure_ascii=False, indent=4)
    
    # Get SHA of the file to update it on GitHub
    response = requests.get(API_URL, headers={
        'Authorization': f'token {GITHUB_TOKEN}'
    })
    
    if response.status_code == 200:
        sha = response.json()['sha']
    else:
        sha = None
        print(f"Failed to get SHA: {response.status_code} - {response.text}")
        return  # Exit if error on getting SHA
    
    data = {
        'message': 'Update homework',
        'content': base64.b64encode(content.encode('utf-8')).decode('utf-8')
    }
    
    if sha:
        data['sha'] = sha
    
    # Update or create file on GitHub
    response = requests.put(API_URL, headers={
        'Authorization': f'token {GITHUB_TOKEN}'
    }, json=data)
    
    if response.status_code in [200, 201]:
        print(f'File successfully {"updated" if sha else "created"} on GitHub')
    else:
        print(f'Error saving to GitHub: {response.status_code} - {response.text}')

# Load the current homework data
homework_dict = load_homework()

# Save homework to the database and GitHub
save_homework(homework_dict)
save_homework_to_github(homework_dict)

# Create the keyboards
def create_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = KeyboardButton("–î–ó üìñ")
    button3 = KeyboardButton("–î–ª—è –∞–¥–º—ñ–Ω—ñ–≤")
    button4 = KeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è‚ùì")
    button5 = KeyboardButton("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
    keyboard.add(button1)
    keyboard.add(button5, button4)
    keyboard.add(button3)
    return keyboard


def create_subjects_keyboard():
    keyboard = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    for subject in homework_dict.keys():
        keyboard.add(KeyboardButton(subject))
    keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"))
    return keyboard


def create_edit_options_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button_add_text = KeyboardButton("–î–æ–¥–∞—Ç–∏ —â–µ —Ç–µ–∫—Å—Ç üìù")
    button_finish_editing = KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ‚úÖ")
    keyboard.add(button_add_text, button_finish_editing)
    return keyboard


def create_support_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button_complaint = KeyboardButton("–û–ø–∏—Å–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è")
    button_back = KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è")
    keyboard.add(button_complaint, button_back)
    return keyboard


# Bot message handlers
@bot.message_handler(commands=["start"])
def start(message):
    if message.chat.type == 'private':
        bot.reply_to(
            message,
            "<b>–ü—Ä–∏–≤—ñ—Ç!</b>\n"
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ:",
            reply_markup=create_main_keyboard(),
            parse_mode='HTML'
        )


@bot.message_handler(func=lambda message: message.text == "–î–ó üìñ")
def get_homework(message):
    if message.chat.type == 'private':
        bot.reply_to(
            message,
            "<b>–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç</b>, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è:",
            reply_markup=create_subjects_keyboard(),
            parse_mode='HTML'
        )


@bot.message_handler(func=lambda message: message.text == "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
def bot_info(message):
    bot.send_message(
        message.chat.id,
        "ü§ñ <b>–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.</b>\n\n"
        "üìå <b>–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞:</b>\n"
        "üîπ –®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–≥–ª—è–¥ –¥–æ–º–∞—à–Ω—ñ—Ö –∑–∞–≤–¥–∞–Ω—å –≤—Å—ñ—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤\n"
        "üîπ –î–æ–¥–∞–≤–∞–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –î–ó (–¥–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)\n"
        "üîπ –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n\n"
        "‚öô <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º?</b>\n"
        "üîπ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.\n"
        "üîπ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É (–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è‚ùì) —Ç–∞ –æ–ø–∏—à—ñ—Ç—å –æ–≥–æ.\n\n"
        "üí° <b>–†–æ–∑—Ä–æ–±–Ω–∏–∫:</b> @ma1ster\n"
        "üì¨ –Ø–∫—â–æ —É –≤–∞—Å —î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∞–±–æ –≤–∏ –∑–Ω–∞–π—à–ª–∏ –ø–æ–º–∏–ª–∫–∏, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞!",
        parse_mode='HTML'
    )


@bot.message_handler(func=lambda message: message.text == "–î–ª—è –∞–¥–º—ñ–Ω—ñ–≤")
def edit_homework(message):
    if message.chat.type == 'private':
        if message.from_user.id in ADMIN_IDS:
            bot.reply_to(
                message,
                "<b>–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç</b> –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è:",
                reply_markup=create_subjects_keyboard(),
                parse_mode='HTML'
            )
        else:
            bot.reply_to(message, "<b>üò¢ –£–ø—Å, –≤–∏–±–∞—á—Ç–µ, –∞–ª–µ –≤–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä. üö´</b>", parse_mode='HTML')


@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è")
def go_back(message):
    if message.chat.type == 'private':
        bot.reply_to(
            message,
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ:",
            reply_markup=create_main_keyboard(),
            parse_mode='HTML'
        )


@bot.message_handler(func=lambda message: message.text in homework_dict)
def handle_subject(message):
    subject = message.text
    if homework_dict[subject]:
        bot.reply_to(
            message,
            f"<b>–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ {subject}:</b>\n\n{homework_dict[subject]}\n\n<b>–ü–∏—Ç–∞–Ω–Ω—è:</b> @ma1ster",
            parse_mode='HTML'
        )
    else:
        bot.reply_to(
            message,
            f"<b>–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ {subject} —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–µ.</b>\n\n<b>–ü–∏—Ç–∞–Ω–Ω—è:</b> @ma1ster",
            parse_mode='HTML'
        )
    bot.reply_to(
        message,
        "–í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –ø—Ä–µ–¥–º–µ—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å.",
        reply_markup=create_subjects_keyboard(),
        parse_mode='HTML'
    )


if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")
    app.run(host="0.0.0.0", port=10000, debug=True)
