import telebot
from flask import Flask, request
import json

TOKEN = "7805329225:AAGysumTy8PyJKIaywur0ZRtWGpbAdvAM0k"
OWNER_ID = 5223717297
GROUP_ID = -1002207273836
ADMIN_IDS = {5223717297, 1071290377, 1474741889}
WEBHOOK_URL = 'https://ma1ster.onrender.com' 

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ (—â–æ–± Render –Ω–µ –∑–∞—Å–∏–Ω–∞–≤)
@app.route("/", methods=["GET"])
def home():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î!", 200

# Webhook –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    update = request.get_json()
    if update:
        bot.process_new_updates([telebot.types.Update.de_json(update)])
    return 'OK', 200

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Webhook
def set_webhook():
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    

homework_dict = {
    "—Ñ—ñ–∑–∏–∫–∞ ü™ê": "",
    "—Ñ—ñ–∑–∫—É–ª—å—Ç—É—Ä–∞ üèãÔ∏è‚Äç‚ôÇÔ∏è": "",
    "–≥–µ–æ–≥—Ä–∞—Ñ—ñ—è üåç": "",
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó ‚öôÔ∏è": "",
    "—ñ—Å—Ç–æ—Ä—ñ—è —É–∫—Ä–∞—ó–Ω–∏ ‚öîÔ∏è": "",
    "–∑–∞—Ä—É–±—ñ–∂–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞ üìö": "",
    "–≤—Å–µ—Å–≤—ñ—Ç–Ω—è —ñ—Å—Ç–æ—Ä—ñ—è ‚öîÔ∏è": "",
    "—Ö—ñ–º—ñ—è üß™": "",
    "—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ üíª": "",
    "–∑–∞—Ö–∏—Å—Ç —É–∫—Ä–∞—ó–Ω–∏ ü™ñ": "",
    "—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ üìù": "",
    "—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞ üìñ": "",
    "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚ûó": "",
    "–±—ñ–æ–ª–æ–≥—ñ—è ü¶†": "",
    "—ñ–Ω–æ–∑–µ–º–Ω–∞ –º–æ–≤–∞(–ª–∏–Ω)": "",
    "—ñ–Ω–æ–∑–µ–º–Ω–∞ –º–æ–≤–∞(–ª—è—à–µ–Ω–∫–æ)": ""
}

try:
    with open("homework.json", "r", encoding="utf-8") as file:
        homework_dict.update(json.load(file))
except FileNotFoundError:
    pass

user_state = {}
user_homework = {}
selected_subjects = {}

def save_homework():
    with open("homework.json", "w", encoding="utf-8") as file:
        json.dump(homework_dict, file, ensure_ascii=False, indent=4)
    with open("homework.json", "rb") as file:
        bot.send_document(OWNER_ID, file)

def create_subjects_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for subject in homework_dict:
        keyboard.add(telebot.types.KeyboardButton(subject))
    keyboard.add(telebot.types.KeyboardButton("‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ –≥—Ä—É–ø—É"), telebot.types.KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"))
    return keyboard

def create_main_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –î–ó ‚úèÔ∏è", "–î–ó –≤ –≥—Ä—É–ø—É üì©", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –î–ó üëÄ")
    return keyboard

def create_finish_keyboard():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏", "‚ûï –î–æ–¥–∞—Ç–∏ —â–µ")
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    if message.from_user.id in ADMIN_IDS:
        bot.send_message(message.chat.id, "üîπ –í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=create_main_keyboard())
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")

@bot.message_handler(func=lambda message: message.text == "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –î–ó ‚úèÔ∏è")
def edit_homework(message):
    if message.from_user.id in ADMIN_IDS:
        bot.send_message(message.chat.id, "üîπ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:", reply_markup=create_subjects_keyboard())
        user_state[message.from_user.id] = "choosing_subject"

@bot.message_handler(func=lambda message: user_state.get(message.from_user.id) == "choosing_subject")
def enter_homework(message):
    user_id = message.from_user.id
    if message.text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è":
        bot.send_message(message.chat.id, "üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=create_main_keyboard())
        user_state.pop(user_id, None)
        return

    if message.text in homework_dict:
        homework_dict[message.text] = ""
        bot.send_message(message.chat.id, f"üîπ –°—Ç–∞—Ä–µ –î–ó –¥–ª—è {message.text} –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –î–ó:",
                         reply_markup=telebot.types.ReplyKeyboardRemove())
        user_state[user_id] = "editing_homework"
        user_homework[user_id] = message.text
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda message: user_state.get(message.from_user.id) == "editing_homework")
def save_homework_entry(message):
    user_id = message.from_user.id
    subject = user_homework[user_id]
    homework_dict[subject] += ("\n\n" if homework_dict[subject] else "") + message.text
    bot.send_message(message.chat.id, "‚úÖ –î–ó –¥–æ–¥–∞–Ω–æ. –©–æ —Ä–æ–±–∏–º–æ –¥–∞–ª—ñ?", reply_markup=create_finish_keyboard())
    user_state[user_id] = "finish_or_add"

@bot.message_handler(func=lambda message: user_state.get(message.from_user.id) == "finish_or_add")
def finish_or_add_more(message):
    user_id = message.from_user.id
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏":
        save_homework()
        bot.send_message(message.chat.id, "‚úÖ –î–ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=create_main_keyboard())
        user_state.pop(user_id, None)
        user_homework.pop(user_id, None)
    elif message.text == "‚ûï –î–æ–¥–∞—Ç–∏ —â–µ":
        bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤–µ –î–ó:", reply_markup=telebot.types.ReplyKeyboardRemove())
        user_state[user_id] = "editing_homework"
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑—ñ —Å–ø–∏—Å–∫—É.")

@bot.message_handler(func=lambda message: message.text == "–î–ó –≤ –≥—Ä—É–ø—É üì©")
def send_homework_to_group(message):
    if message.from_user.id in ADMIN_IDS:
        bot.send_message(message.chat.id, "üîπ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (–Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –ø–æ —á–µ—Ä–∑—ñ):",
                         reply_markup=create_subjects_keyboard())
        user_state[message.from_user.id] = "choosing_subjects"
        selected_subjects[message.from_user.id] = []

@bot.message_handler(func=lambda message: user_state.get(message.from_user.id) == "choosing_subjects")
def choose_subjects_for_group(message):
    user_id = message.from_user.id
    if message.text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è":
        bot.send_message(message.chat.id, "üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=create_main_keyboard())
        user_state.pop(user_id, None)
        selected_subjects.pop(user_id, None)
        return

    if message.text == "‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ –≥—Ä—É–ø—É":
        if user_id not in selected_subjects or not selected_subjects[user_id]:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –í–∏ –Ω–µ –æ–±—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.")
            return

        message_text = "üí¨ <b>–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è:</b>\n\n"
        for subject in selected_subjects[user_id]:
            message_text += f"\nüß∑ <b>{subject}:</b>\n{homework_dict.get(subject, '‚ùå –ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω–Ω—è')}\n"
            message_text += "_______________________\n"
        message_text += "–ë—ñ–ª—å—à–µ –î–ó —Ç—É—Ç: <a href='https://sites.google.com/view/ip31253456'>https://sites.google.com/view/ip31253456</a>"

        bot.send_message(message.chat.id, message_text, parse_mode="HTML")
        bot.send_message(GROUP_ID, message_text, parse_mode="HTML")

        bot.send_message(message.chat.id, "‚úÖ –î–ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø—É.", reply_markup=create_main_keyboard())
        user_state.pop(user_id, None)
        selected_subjects.pop(user_id, None)
        return

    subject = message.text
    if subject in homework_dict:
        if user_id not in selected_subjects:
            selected_subjects[user_id] = []

        if subject not in selected_subjects[user_id]:
            selected_subjects[user_id].append(subject)
            bot.send_message(message.chat.id, f"‚úÖ {subject} –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É.")
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@bot.message_handler(func=lambda message: message.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –î–ó üëÄ")
def view_homework(message):
    bot.send_message(message.chat.id, "üîπ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:", reply_markup=create_subjects_keyboard())
    user_state[message.from_user.id] = "choosing_subject_for_view"


@bot.message_handler(func=lambda message: user_state.get(message.from_user.id) == "choosing_subject_for_view")
def send_homework_for_subject(message):
    user_id = message.from_user.id
    subject = message.text

    if subject == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è":
        bot.send_message(message.chat.id, "üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=create_main_keyboard())
        user_state.pop(user_id, None)
        return

    if subject in homework_dict:
        homework = homework_dict[subject] if homework_dict[subject] else "‚ùå –ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω–Ω—è"
        bot.send_message(message.chat.id, f"üí¨ <b>–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ {subject}:</b>\n\n{homework}", parse_mode="HTML", reply_markup=create_main_keyboard())
        user_state.pop(user_id, None)
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")



# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
if __name__ == "__main__":
    set_webhook()
    app.run(host="0.0.0.0", port=8080)
