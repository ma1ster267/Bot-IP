import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import json
import os
import sqlite3
from datetime import datetime

TOKEN = '7805329225:AAEENYaeSeA7afi0Fa2_OUvCTo7rf0aVaO0'
bot = telebot.TeleBot(TOKEN)

DB_FILE = "homework.db"
OWNER_ID = 5223717297
SECOND_OWNER_ID = 5223717297
SUPPORT_ID = 5223717297

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def connect_db():
    conn = sqlite3.connect(DB_FILE)
    return conn

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
def create_table():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS homework (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            data TEXT
        )
    """)
    conn.commit()
    conn.close()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def load_homework():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT data FROM homework ORDER BY id DESC LIMIT 1")
    row = cursor.fetchone()
    conn.close()

    if row:
        return json.loads(row[0])
    else:
        return create_default_homework()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
def create_default_homework():
    return {
        "—Ñ—ñ–∑–∏–∫–∞ ü™ê": "",
        "—Ñ—ñ–∑–∫—É–ª—å—Ç—É—Ä–∞ üèãÔ∏è‚Äç‚ôÇÔ∏è": "",
        "–≥–µ–æ–≥—Ä–∞—Ñ—ñ—è üåç": "",
        "—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó ‚öôÔ∏è": "",
        "—ñ—Å—Ç–æ—Ä—ñ—è —É–∫—Ä–∞—ó–Ω–∏ ‚öîÔ∏è": "",
        "–∑–∞—Ä—É–±—ñ–∂–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞ üìö": "",
        "–≤—Å–µ—Å–≤—ñ—Ç–Ω—è —ñ—Å—Ç–æ—Ä—ñ—è ‚öîÔ∏è": "",
        "—Ö—ñ–º—ñ—è üß™": "",
        "—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ üíª": "",
        "–∑–∞—Ö–∏—Å—Ç —É–∫—Ä–∞—ó–Ω–∏ ü™ñ": "",
        "—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞ üìù": "",
        "—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞ üìñ": "",
        "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ ‚ûó": "",
        "–±—ñ–æ–ª–æ–≥—ñ—è ü¶†": "",
        "—ñ–Ω–æ–∑–µ–º–Ω–∞ –º–æ–≤–∞(–ª–∏–Ω)": "",
        "—ñ–Ω–æ–∑–µ–º–Ω–∞ –º–æ–≤–∞(–ª—è—à–µ–Ω–∫–æ)": "",
    }

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
def save_homework(homework_dict):
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO homework (data) VALUES (?)", (json.dumps(homework_dict),))
    conn.commit()
    conn.close()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ —Ç–∞–±–ª–∏—Ü—ñ
create_table()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
homework_dict = load_homework()
user_state = {}


def create_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = KeyboardButton("–î–ó üìñ")
    button3 = KeyboardButton("–î–ª—è –∞–¥–º—ñ–Ω—ñ–≤")
    button4 = KeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è‚ùì")
    button5 = KeyboardButton("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
    keyboard.add(button1)
    keyboard.add(button5, button4)
    keyboard.add(button3)
    return keyboard


def create_subjects_keyboard():
    keyboard = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    for subject in homework_dict.keys():
        keyboard.add(KeyboardButton(subject))
    keyboard.add(KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"))
    return keyboard


def create_edit_options_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button_add_text = KeyboardButton("–î–æ–¥–∞—Ç–∏ —â–µ —Ç–µ–∫—Å—Ç üìù")
    button_finish_editing = KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ‚úÖ")
    keyboard.add(button_add_text, button_finish_editing)
    return keyboard


def create_support_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    button_complaint = KeyboardButton("–û–ø–∏—Å–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è")
    button_back = KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è")
    keyboard.add(button_complaint, button_back)
    return keyboard


@bot.message_handler(commands=["start"])
def start(message):
    if message.chat.type == 'private':
        bot.reply_to(
            message,
            "<b>–ü—Ä–∏–≤—ñ—Ç!</b>\n"
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ:",
            reply_markup=create_main_keyboard(),
            parse_mode='HTML'
        )


@bot.message_handler(func=lambda message: message.text == "–î–ó üìñ")
def get_homework(message):
    if message.chat.type == 'private':
        bot.reply_to(
            message,
            "<b>–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç</b>, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è:",
            reply_markup=create_subjects_keyboard(),
            parse_mode='HTML'
        )


@bot.message_handler(func=lambda message: message.text == "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
def bot_info(message):
    bot.send_message(
        message.chat.id,
        "ü§ñ <b>–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.</b>\n\n"
        "üìå <b>–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞:</b>\n"
        "üîπ –®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–≥–ª—è–¥ –¥–æ–º–∞—à–Ω—ñ—Ö –∑–∞–≤–¥–∞–Ω—å –≤—Å—ñ—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤\n"
        "üîπ –î–æ–¥–∞–≤–∞–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –î–ó (–¥–æ—Å—Ç—É–ø–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º)\n"
        "üîπ –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n\n"
        "‚öô <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º?</b>\n"
        "üîπ –û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è.\n"
        "üîπ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É (–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è‚ùì) —Ç–∞ –æ–ø–∏—à—ñ—Ç—å –æ–≥–æ.\n\n"
        "üí° <b>–†–æ–∑—Ä–æ–±–Ω–∏–∫:</b> @ma1ster\n"
        "üì¨ –Ø–∫—â–æ —É –≤–∞—Å —î –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∞–±–æ –≤–∏ –∑–Ω–∞–π—à–ª–∏ –ø–æ–º–∏–ª–∫–∏, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞!",
        parse_mode='HTML'
    )




@bot.message_handler(func=lambda message: message.text == "–î–ª—è –∞–¥–º—ñ–Ω—ñ–≤")
def edit_homework(message):
    if message.chat.type == 'private':
        if message.from_user.id in [OWNER_ID, SECOND_OWNER_ID]:
            bot.reply_to(
                message,
                "<b>–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç</b> –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è:",
                reply_markup=create_subjects_keyboard(),
                parse_mode='HTML'
            )
            user_state[message.from_user.id] = 'editing_homework'
            bot.register_next_step_handler(message, prompt_new_homework)
        else:
            bot.reply_to(message, "<b>üò¢ –£–ø—Å, –≤–∏–±–∞—á—Ç–µ, –∞–ª–µ –≤–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä. üö´</b>", parse_mode='HTML')


@bot.message_handler(func=lambda message: message.text == "–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è‚ùì")
def support(message):
    if message.chat.type == 'private':
        bot.reply_to(
            message,
            "–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É, –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ '–û–ø–∏—Å–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è' –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞–∑–∞–¥.",
            reply_markup=create_support_keyboard(),
            parse_mode='HTML'
        )


@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è")
def go_back(message):
    if message.chat.type == 'private':
        user_id = message.from_user.id
        if user_id in user_state and user_state[user_id] == 'editing_homework':
            bot.reply_to(
                message,
                "<b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.</b> –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≤–∏–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞.",
                reply_markup=create_subjects_keyboard(),
                parse_mode='HTML'
            )
            user_state[user_id] = 'viewing_homework'
        else:
            bot.reply_to(
                message,
                "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ:",
                reply_markup=create_main_keyboard(),
                parse_mode='HTML'
            )
            user_state[user_id] = 'viewing_homework'


@bot.message_handler(func=lambda message: message.text in homework_dict)
def handle_subject(message):
    subject = message.text
    if homework_dict[subject]:
        bot.reply_to(
            message,
            f"<b>–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ {subject}:</b>\n\n{homework_dict[subject]}\n\n<b>–ü–∏—Ç–∞–Ω–Ω—è:</b> @ma1ster",
            parse_mode='HTML'
        )
    else:
        bot.reply_to(
            message,
            f"<b>–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –∑ {subject} —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–µ.</b>\n\n<b>–ü–∏—Ç–∞–Ω–Ω—è:</b> @ma1ster",
            parse_mode='HTML'
        )
    bot.reply_to(
        message,
        "–í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –ø—Ä–µ–¥–º–µ—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å.",
        reply_markup=create_subjects_keyboard(),
        parse_mode='HTML'
    )


def prompt_new_homework(message):
    subject = message.text
    if subject in homework_dict:
        bot.reply_to(message,
                     f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å <b>–Ω–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è</b> –¥–ª—è {subject}",
                     parse_mode='HTML')
        user_state[message.from_user.id] = {'subject': subject, 'new_homework': ''}
        bot.register_next_step_handler(message, handle_homework_input)
    else:
        bot.reply_to(message, "<b>–ù–µ–≤—ñ–¥–æ–º–∏–π –ø—Ä–µ–¥–º–µ—Ç.</b> –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", parse_mode='HTML')


def handle_homework_input(message):
    user_id = message.from_user.id
    subject = user_state[user_id]["subject"]

    if message.text:
        if user_state[user_id]["new_homework"]:
            user_state[user_id]["new_homework"] += "\n\n" + message.text
        else:
            user_state[user_id]["new_homework"] = message.text

    bot.reply_to(
        message,
        "–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ —Ç–µ–∫—Å—Ç –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.",
        reply_markup=create_edit_options_keyboard(),
        parse_mode='HTML'
    )


@bot.message_handler(func=lambda message: message.text == "–î–æ–¥–∞—Ç–∏ —â–µ —Ç–µ–∫—Å—Ç üìù")
def add_more_text(message):
    user_id = message.from_user.id
    bot.reply_to(message, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —á–∞—Å—Ç–∏–Ω—É –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è:", parse_mode='HTML')
    bot.register_next_step_handler(message, handle_homework_input)


@bot.message_handler(func=lambda message: message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ‚úÖ")
def finish_editing(message):
    user_id = message.from_user.id
    subject = user_state[user_id]["subject"]
    new_homework = user_state[user_id]["new_homework"]

    homework_dict[subject] = new_homework
    save_homework(homework_dict)  # –ü–µ—Ä–µ–¥–∞—î–º–æ homework_dict —É —Ñ—É–Ω–∫—Ü—ñ—é save_homework

    bot.reply_to(message, "‚úÖ –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
    user_state.pop(user_id)
    bot.reply_to(
        message,
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ:",
        reply_markup=create_main_keyboard(),
        parse_mode='HTML'
    )


@bot.message_handler(func=lambda message: message.text == "–û–ø–∏—Å–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è")
def new_complaint(message):
    user_state[message.from_user.id] = 'new_complaint'
    bot.reply_to(message, "–û–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:")


@bot.message_handler(func=lambda message: user_state.get(message.from_user.id) == 'new_complaint')
def handle_complaint(message):
    user_id = message.from_user.id
    complaint_text = message.text

    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    bot.send_message(
        OWNER_ID,
        f"üî¥ <b>–ù–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è</b>\n\nüìù <b>–ü–∏—Ç–∞–Ω–Ω—è</b> –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.first_name} (ID: {user_id}, @ {message.from_user.username})\n"
        f"‚è∞ <b>–ß–∞—Å:</b> {current_time}\n\n<b>–ü–∏—Ç–∞–Ω–Ω—è:</b> {complaint_text}",
        parse_mode='HTML'
    )

    bot.reply_to(message, "‚úÖ –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –±—É–ª–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É. –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!")

    user_state.pop(user_id, None)
    bot.reply_to(
        message,
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π –Ω–∏–∂—á–µ:",
        reply_markup=create_main_keyboard(),
        parse_mode='HTML'
    )


bot.polling(non_stop=True)